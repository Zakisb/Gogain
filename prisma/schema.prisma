generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id                          Int                          @id @default(autoincrement())
  firstName                   String?
  lastName                    String?
  email                       String                       @unique
  password                    String?
  birthDate                   DateTime?
  createdAt                   DateTime                     @default(now())
  organizationId              Int?
  deleted                     Boolean                      @default(false)
  imageUrl                    String?
  updatedAt                   DateTime                     @default(now()) @updatedAt
  clerkUserId                 String                       @unique
  isActive                    Boolean                      @default(false)
  accounts                    Account[]
  coachingSessionParticipants CoachingSessionParticipant[]
  license                     License?                     @relation("IndividualLicense")
  organization                Organization?                @relation(fields: [organizationId], references: [id])
}

model Account {
  id               Int               @id @default(autoincrement())
  userId           Int
  role             Role              @default(USER)
  onboarded        Boolean           @default(false)
  attributes       Json?
  isMainAccount    Boolean           @default(false)
  user             User              @relation(fields: [userId], references: [id])
  adminProfile     AdminProfile?
  coachProfile     CoachProfile?
  coachingSessions CoachingSession[]
  userProfile      UserProfile?
}

model AdminProfile {
  id        Int     @id @default(autoincrement())
  accountId Int     @unique
  account   Account @relation(fields: [accountId], references: [id])
}

model CoachProfile {
  id        Int     @id @default(autoincrement())
  accountId Int     @unique
  account   Account @relation(fields: [accountId], references: [id])
}

model UserProfile {
  id                           Int               @id @default(autoincrement())
  accountId                    Int               @unique
  height                       Float?
  weight                       Float?
  gender                       String?
  goal                         Json?
  generalLifestyleHealthHabits Json?
  nutrition                    Json?
  lifestyle                    Json?
  dailyEnvironmentHabits       Json?
  historyCurrentHealth         Json?
  dietPlans                    DietPlan[]
  trainingPrograms             TrainingProgram[]
  account                      Account           @relation(fields: [accountId], references: [id])
}

model LicenseType {
  id       Int             @id @default(autoincrement())
  name     String
  price    Float
  deleted  Boolean         @default(false)
  type     LicenseTypeEnum
  licenses License[]
}

model License {
  id             Int          @id @default(autoincrement())
  organizationId Int
  createdAt      DateTime     @default(now())
  validUntil     DateTime
  licenseKeyId   Int
  deleted        Boolean      @default(false)
  status         Status       @default(PENDING)
  sessionNumber  Int
  individualId   Int?         @unique
  numberOfUsers  Int          @default(0)
  individual     User?        @relation("IndividualLicense", fields: [individualId], references: [id])
  licenseType    LicenseType  @relation(fields: [licenseKeyId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([individualId])
}

model Organization {
  id                Int               @id @default(autoincrement())
  name              String
  deleted           Boolean           @default(false)
  industry          String
  createdAt         DateTime          @default(now())
  mainOrg           Boolean           @default(false)
  numberOfEmployees Int               @default(0)
  coachingSessions  CoachingSession[]
  licenses          License[]
  users             User[]
}

model DietPlan {
  id            Int          @id @default(autoincrement())
  title         String
  description   String?
  meals         Json[]
  userProfileId Int?
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
}

model Exercice {
  id              Int           @id @default(autoincrement())
  title           String
  description     String?
  category        String
  duration        Int?
  level           String
  tags            String[]
  createdAt       DateTime      @default(now())
  deleted         Boolean       @default(false)
  videoExternalId String        @unique
  thumbnailUrl    String
  posterUrl       String?
  embedCode       String
  videoSize       Int
  state           String        @default("inspecting")
  trainingDays    TrainingDay[] @relation("ExerciceToTrainingDay")
}

model TrainingProgram {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  userProfileId Int?
  days          TrainingDay[]
  userProfile   UserProfile?  @relation(fields: [userProfileId], references: [id])
}

model TrainingDay {
  id                Int               @id @default(autoincrement())
  day               Int
  trainingProgramId Int
  date              DateTime
  title             String
  status            TrainingDayStatus @default(UPCOMING)
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  exercises         Exercice[]        @relation("ExerciceToTrainingDay")
}

model CoachingSession {
  id             Int                          @id @default(autoincrement())
  organizationId Int
  day            String
  time           DateTime
  duration       Int
  createdAt      DateTime                     @default(now())
  sessionType    String
  coachAccountId Int?
  coachAccount   Account?                     @relation(fields: [coachAccountId], references: [id])
  organization   Organization                 @relation(fields: [organizationId], references: [id])
  participants   CoachingSessionParticipant[]
}

model CoachingSessionParticipant {
  id                Int             @id @default(autoincrement())
  coachingSessionId Int
  userId            Int
  joinedAt          DateTime        @default(now())
  coachingSession   CoachingSession @relation(fields: [coachingSessionId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  COACH
  HR
  USER
}

enum LicenseTypeEnum {
  INDIVIDUAL
  ORGANIZATION
}

enum Status {
  ACTIVE
  PENDING
  INACTIVE
  SUSPENDED
  EXPIRED
}

enum TrainingDayStatus {
  UPCOMING
  SKIPPED
  MISSED
  COMPLETED
}
