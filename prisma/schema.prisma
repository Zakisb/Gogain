// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}


model User {
  id            Int           @id @default(autoincrement())
  externalId String   @unique 
  firstName     String?
  attributes   Json?
  lastName      String?
  imageUrl        String?
  email         String        @unique
  password      String?
  birthDate     DateTime?
  height        Float?
  weight        Float?
  createdAt     DateTime      @default(now())
  onboarded     Boolean       @default(false)
  gender        String?
  goal         Json?
  generalLifestyleHealthHabits  Json?
  nutrition  Json?
  lifestyle  Json?
  dailyEnvironmentHabits  Json?
  historyCurrentHealth  Json?
  role      Role    @default(EMPLOYEE)
  organizationId                Int?          // Links to the Organization model
  organization                  Organization? @relation(fields: [organizationId], references: [id])
  deleted        Boolean   @default(false)
  dietPlans DietPlan[]
  isOnboarded Boolean @default(false)
  trainingPrograms  TrainingProgram[]

}


model LicenseType {
  id              Int       @id @default(autoincrement())
  name            String
  numberOfUsers   Int
  licenses        License[]
  price           Float
  deleted        Boolean   @default(false)
}

model License {
  id              Int           @id @default(autoincrement())
  licenseKeyId    Int
  licenseType     LicenseType   @relation(fields: [licenseKeyId], references: [id])
  organizationId  Int
  organization    Organization  @relation(fields: [organizationId], references: [id])
  createdAt       DateTime      @default(now())
  validUntil      DateTime
  deleted        Boolean   @default(false)
  status      Status    @default(PENDING) 
}

model Organization {
  id        Int    @id @default(autoincrement())
  name      String
  licenses  License[]
  users     User[]
  deleted        Boolean   @default(false)
  industry        String
  createdAt       DateTime      @default(now())
}


// Define the Role enum
enum Role {
  ADMIN
  HR_REPRESENTATIVE
  EMPLOYEE
}

// Define the Status enum

enum Status {
  ACTIVE
  PENDING
  INACTIVE
  SUSPENDED
  EXPIRED
}


// Fitness related


model DietPlan {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  meals       Json[]
}

// model Meal {
//   id          Int      @id @default(autoincrement())
//   title       String
//   description String?
//   calories    Int?
//   dietPlanId  Int
//   dietPlan    DietPlan @relation(fields: [dietPlanId], references: [id])
//   foods     Json[]
// }

model Exercice {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  category   String
  duration    Int?
  level      String
  tags      String[]
  createdAt   DateTime @default(now())
  deleted        Boolean   @default(false)
  videoExternalId    String  @unique 
  thumbnailUrl    String
  posterUrl    String?
  embedCode    String
  videoSize    Int
  state     String @default("inspecting")
  trainingDays    TrainingDay[]
}

model TrainingProgram {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  days        TrainingDay[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model TrainingDay {
  id                Int            @id @default(autoincrement())
  day               Int
  date             DateTime
  title            String
  trainingProgramId Int
  trainingProgram   TrainingProgram @relation(fields: [trainingProgramId], references: [id])
  exercises         Exercice[]
  status            TrainingDayStatus    @default(UPCOMING)
}

enum TrainingDayStatus {
  UPCOMING
  SKIPPED
  MISSED
  COMPLETED
}